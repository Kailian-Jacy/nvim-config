{
	"Toc": {
		"prefix": "toc",
		"body": [
			"```table-of-contents",
			"title: ${0:Table of Contents}",
			"```"
		]
	},
	"Todos": {
		"prefix": "todo",
		"body": [
			"- [ ] "
		]
	},
	"LazyVimKeymap": {
		"prefix": "pluginkeymap",
		"body": [
			"{",
			"\t\"<keymap>\",",
			"\t\"functionality\",",
			"\tmode = \"n\",",
			"\tdesc = \"n\",",
			"},"
		],
		"desc": "Create new keymap in lazyvim plugin."
	},
	"CreateNewSnippet": {
		"prefix": "newsnippet",
		"body": [
			"\"${1:SnippetName}\": {",
			"\t\"prefix\": \"${2:snip_prefix}\",",
			"\t\"body\": [",
			"\t\t\"${3:Snippet content here}\"",
			"\t]",
			"}"
		],
		"desc": "Create a new code snippet with a specified name, prefix, and content."
	},
	"VimPrintInspect": {
		"prefix": "printinspect",
		"body": [
			"vim.print(vim.inspect($0))"
		]
	},
	"VimAddLog": {
		"prefix": "vimlog",
		"body": [
			"vim.notify(\"$1\", vim.log.levels.$2)"
		]
	},
	"LuaKeymapSnippet": {
		"prefix": "vimkeymap",
		"body": [
			"vim.keymap.set({\"${1:n}\"}, \"${2:<leader>tp}\", function()",
			"\t${3:vim.notify(\"Keymap Triggered\", vim.log.levels.INFO)}",
			"end, { desc = \"${4:Description}\" })"
		],
		"description": "Create a Neovim keymap using vim.keymap.set"
	},
	"debug.launch_json.rust": {
		"prefix": "rustlaunchjsonconfig",
		"body": [
			"{",
			"  \"type\": \"codelldb\",",
			"  \"request\": \"launch\",",
			"  \"name\": \"Debug Rust Program\",",
			"  \"program\": \"\\${workspaceFolder}/target/debug/\\${workspaceFolderBasename}\",",
			"  \"args\": [],",
			"  \"cwd\": \"\\${workspaceFolder}\",",
			"  \"sourceMap\": {",
			"    \"/rustc/<toolchain-hash>/\": \"\\${env:HOME}/.rustup/toolchains/<toolchain>/lib/rustlib/src/rust/\"",
			"  },",
			"  \"preLaunchTask\": \"cargo build\"",
			"}"
		],
		"description": "example config.json config for Rust programs."
	},
	"llm.prompt.fix": {
		"prefix": "fix",
		"body": [
			"Fix or complete the given pseudocode as TODO and comment instructed, refering the surrounding examples."
		],
		"desc": "Snippet for fixing pseudocode with TODO and comments"
	},
	"llm.prompt.tdd": {
		"prefix": "tdd",
		"body": [
			"Finish and test this function, and REPLACE it on success.",
			"1. Refine the ommited part in doc comment. Put necessary test cases within doc. If the language has doc test, follow the case.",
			"2. Finish the code with brief comment.",
			"3. Pick appropriate tool to test the code. ",
			"4. Merge finished code and test cases.",
			"Do not stop until finish these all steps or meet something you can't dipose."
		],
		"desc": "Snippet for test-driven development workflow"
	},
	"llm.comment.testcase": {
		"prefix": "aitest",
		"body": [
			"@ai: generate test case for this."
		],
		"desc": "Instruct ai to generate test case for this function."
	}
}
